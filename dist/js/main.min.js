!function () {
    const e = document,
        t = e.documentElement,
        n = e.body,
        i = e.getElementById("lights-toggle"),
        s = window.sr = ScrollReveal();

    // Function to toggle between light and dark modes
    function a() {
        let lightIcon = i.querySelector("#icon-light"),
            darkIcon = i.querySelector("#icon-dark");

        if (n.classList.contains("lights-off")) {
            n.classList.remove("lights-off");
            lightIcon.style.display = "inline-block";
            darkIcon.style.display = "none";
            localStorage.setItem('darkMode', 'off'); // Save preference as 'off'
        } else {
            n.classList.add("lights-off");
            lightIcon.style.display = "none";
            darkIcon.style.display = "inline-block";
            localStorage.setItem('darkMode', 'on'); // Save preference as 'on'
        }
    }

    // Function to initialize the mode based on local storage
    function initializeDarkMode() {
        let darkMode = localStorage.getItem('darkMode'); // Get stored preference
        if (darkMode == null) {
            darkMode='on';
        }
        let lightIcon = i.querySelector("#icon-light"),
            darkIcon = i.querySelector("#icon-dark");

        if (darkMode === 'on') {
            n.classList.add("lights-off");
            lightIcon.style.display = "none";
            darkIcon.style.display = "inline-block";
        } else {
            n.classList.remove("lights-off");
            lightIcon.style.display = "inline-block";
            darkIcon.style.display = "none";
        }
    }

    t.classList.remove("no-js"),
        t.classList.add("js"),
        window.addEventListener("load", function () { 
            n.classList.add("is-loaded");
            initializeDarkMode(); // Initialize dark mode based on user preference
        });

    n.classList.contains("has-animations") && window.addEventListener(
        "load", function () {
            s.reveal(".feature", {
                duration: 600,
                distance: "20px",
                easing: "cubic-bezier(0.215, 0.61, 0.355, 1)",
                origin: "right", viewFactor: .2
            });
        }
    );

    i && i.addEventListener("click", a);
    
}();


const registrationOpenDate = new Date('September 16, 2024 09:30:00').getTime();
// const registrationOpenDate = new Date().getTime()
const registrationCloseDate = new Date('September 28, 2024 23:59:59').getTime();
// const registrationCloseDate = new Date().getTime()
const eventStart = new Date('October 3, 2024 22:00:00').getTime();


const updateCountdown = setInterval(function() {
    const now = new Date().getTime()
    // const now = new Date('September 24, 2024 22:00:00').getTime();

    if (now < registrationOpenDate) {
        const distance = registrationOpenDate - now; // Calculate the distance between now and the target date

        // Time calculations for days, hours, minutes, and seconds
        const days = Math.floor(Math.abs(distance / (1000 * 60 * 60 * 24)));
        const hours = Math.floor(Math.abs((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
        const minutes = Math.floor(Math.abs((distance % (1000 * 60 * 60)) / (1000 * 60)));
        const seconds = Math.floor(Math.abs((distance % (1000 * 60)) / 1000));
        console.log(days,hours,minutes,seconds)

        // Display the result in elements with id="days", "hours", "minutes", "seconds"
        document.getElementById("days").innerHTML = (days < 10 ? "0" : "") + days;
        document.getElementById("hours").innerHTML = (hours < 10 ? "0" : "") + hours;
        document.getElementById("minutes").innerHTML = (minutes < 10 ? "0" : "") + minutes;
        document.getElementById("seconds").innerHTML = (seconds < 10 ? "0" : "") + seconds;
        // Before the registration period starts
        document.getElementById("registerButton").innerHTML = '<i>opens soon</i>';
        document.getElementById("registerButton").classList.add('closed');
        document.getElementById("registerButton").removeAttribute('href');
    } else if (now >= registrationOpenDate && now <= registrationCloseDate) {
        // During the registration period
        const distance = registrationCloseDate - now; // Calculate the distance between now and the target date

        // Time calculations for days, hours, minutes, and seconds
        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Display the result in elements with id="days", "hours", "minutes", "seconds"
        document.getElementById("days").innerHTML = (days < 10 ? "0" : "") + days;
        document.getElementById("hours").innerHTML = (hours < 10 ? "0" : "") + hours;
        document.getElementById("minutes").innerHTML = (minutes < 10 ? "0" : "") + minutes;
        document.getElementById("seconds").innerHTML = (seconds < 10 ? "0" : "") + seconds;

        // Update the button text and attributes

        document.getElementById("registerButton").innerHTML = '<i>Register Now</i>';
        document.getElementById("timer-content").innerHTML = '<p>Registration closes in:</p>';
        document.getElementById("registerButton").classList.remove('closed');
        document.getElementById("registerButton").setAttribute('href', 'https://aida-ideaignite.devfolio.co/');
    } 
    else if (now <= eventStart) {
        // During the registration period
        const distance = eventStart - now; // Calculate the distance between now and the target date

        // Time calculations for days, hours, minutes, and seconds
        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Display the result in elements with id="days", "hours", "minutes", "seconds"
        document.getElementById("days").innerHTML = (days < 10 ? "0" : "") + days;
        document.getElementById("hours").innerHTML = (hours < 10 ? "0" : "") + hours;
        document.getElementById("minutes").innerHTML = (minutes < 10 ? "0" : "") + minutes;
        document.getElementById("seconds").innerHTML = (seconds < 10 ? "0" : "") + seconds;

        // Update the button text and attributes
        document.getElementById("registerButton").innerHTML = '<i>Closed</i>';
        document.getElementById("timer-content").innerHTML = '<p>Event Starts in:</p>';
        document.getElementById("registerButton").classList.add('closed');
        document.getElementById("registerButton").removeAttribute('href');
    }
    else {
        // After the registration period ends
        clearInterval(updateCountdown);
        document.getElementById("registerButton").innerHTML = '<i>Closed</i>';
        document.getElementById("timer-content").innerHTML = '<p>Event has already started....</p>';
        document.getElementById("registerButton").classList.add('closed');
        document.getElementById("registerButton").removeAttribute('href');
        document.getElementById("days").innerHTML = "00";
        document.getElementById("hours").innerHTML = "00";
        document.getElementById("minutes").innerHTML = "00";
        document.getElementById("seconds").innerHTML = "00";
    }
}, 1000);


document.addEventListener("DOMContentLoaded", () => {
    const hamburger = document.querySelector('.hamburger');
    const navLinks = document.querySelector('.nav-links');
    const navContainer = document.querySelector('nav');

    // Toggle nav menu
    hamburger.addEventListener('click', () => {
        navLinks.classList.toggle('nav-active');
    });

    // Close nav menu when clicking outside
    document.addEventListener('click', (event) => {
        if (!navContainer.contains(event.target) && navLinks.classList.contains('nav-active')) {
            navLinks.classList.remove('nav-active');
        }
    });

    // Close nav menu on scroll
    window.addEventListener('scroll', () => {
        if (navLinks.classList.contains('nav-active')) {
            navLinks.classList.remove('nav-active');
        }
    });
});


function redirectFunction(url) {
    window.location.href = url;
}

document.getElementById('toggleButton1dark').addEventListener('click', function() {
    const toggleItem1 = document.getElementById('contact-laptop1');
    toggleItem1.classList.toggle('hidden');  // Toggle the 'hidden' class
});

document.getElementById('toggleButton1light').addEventListener('click', function() {
    const toggleItem1 = document.getElementById('contact-laptop1');
    toggleItem1.classList.toggle('hidden');  // Toggle the 'hidden' class
});

document.getElementById('toggleButton2dark').addEventListener('click', function() {
    const toggleItem2 = document.getElementById('contact-laptop2');
    toggleItem2.classList.toggle('hidden');  // Toggle the 'hidden' class
});

document.getElementById('toggleButton2light').addEventListener('click', function() {
    const toggleItem2 = document.getElementById('contact-laptop2');
    toggleItem2.classList.toggle('hidden');  // Toggle the 'hidden' class
});